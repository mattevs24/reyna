import numpy as np
import matplotlib.pyplot as plt
from shapely import Polygon, Point

from polyfem.polymesher.poly_mesher_domain import RectangleDomain
from polyfem.polymesher.poly_mesher_main import poly_mesher
from polyfem.polymesher.poly_mesher_clean import poly_mesher_cleaner
from geometry import DGFEMGeometry

from main import DGFEM
from _auxilliaries.plotting_utils import plot_DG

dom = RectangleDomain(np.array([[0, 1], [0, 1]]))

# Section: advection testing

# advection = lambda x: np.ones(x.shape, dtype=float)
# forcing = lambda x: np.pi * (np.cos(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1]) +
#                              np.sin(np.pi * x[:, 0]) * np.cos(np.pi * x[:, 1]))
# solution = lambda x: np.sin(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1])

# Section: diffusion testing

# diffusion = lambda x: np.repeat([np.identity(2, dtype=float)], x.shape[0], axis=0)
# forcing = lambda x: 2.0 * np.pi ** 2 * np.sin(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1])
# solution = lambda x: np.sin(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1])
#
#
# def grad_solution(x: np.ndarray):
#     u_x = np.pi * np.cos(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1])
#     u_y = np.pi * np.sin(np.pi * x[:, 0]) * np.cos(np.pi * x[:, 1])
#
#     return np.vstack((u_x, u_y)).T

# Section: diffusion-advection-reaction

diffusion = lambda x: np.repeat([np.identity(2, dtype=float)], x.shape[0], axis=0)
advection = lambda x: np.ones(x.shape, dtype=float)
reaction = lambda x: -2 * np.pi ** 2 * np.ones(x.shape[0], dtype=float)
forcing = lambda x: np.pi * (np.cos(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1]) +
                             np.sin(np.pi * x[:, 0]) * np.cos(np.pi * x[:, 1]))
solution = lambda x: np.sin(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1])


def grad_solution(x: np.ndarray):
    u_x = np.pi * np.cos(np.pi * x[:, 0]) * np.sin(np.pi * x[:, 1])
    u_y = np.pi * np.sin(np.pi * x[:, 0]) * np.cos(np.pi * x[:, 1])

    return np.vstack((u_x, u_y)).T


n_elements = [32, 64, 128, 256, 512, 1024, 2048]

h_s = []
dg_norms = []
l2_norms = []
h1_norms = []

# for n_r in n_elements:
#
#     poly_mesh = poly_mesher(dom, max_iterations=10, n_points=n_r)
#     poly_mesh = poly_mesher_cleaner(poly_mesh)
#     geometry = DGFEMGeometry(poly_mesh)
#
#     dg = DGFEM(geometry, polynomial_degree=3)
#     dg.add_data(
#         diffusion=diffusion,
#         advection=advection,
#         reaction=reaction,
#         dirichlet_bcs=solution,
#         forcing=forcing
#     )
#     dg.dgfem(solve=True)
#
#     # plot_DG(dg.solution, geometry, dg.polydegree)
#
#     dg_error, l2_error, h1_error = dg.errors(exact_solution=solution,
#                                              div_advection=lambda x: np.zeros(x.shape[0]),
#                                              grad_exact_solution=grad_solution)
#     dg_norms.append(dg_error)
#     l2_norms.append(l2_error)
#     h1_norms.append(h1_error)
#
#     _h = -np.inf
#     for element in geometry.elements:
#         poly = Polygon(geometry.nodes[element, :])
#         box = poly.minimum_rotated_rectangle
#         _x, _y = box.exterior.coords.xy
#         edge_length = (Point(_x[0], _y[0]).distance(Point(_x[1], _y[1])),
#                        Point(_x[1], _y[1]).distance(Point(_x[2], _y[2])))
#         _h = max(_h, max(edge_length))
#
#     h_s.append(_h)
    # plot_DG(dg.solution, geometry, dg.polydegree)

print(h_s)
print(dg_norms)
print(l2_norms)
print(h1_norms)


# # Section: hyperbolic test case results.
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.667471351503544, 0.5797567060215092, 0.5101411608005707, 0.44115079959517794, 0.3701710038011913,
#           0.31608574527296457, 0.26729828955744234, 0.22675874493506334], label='DG0')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.16109281486902058, 0.0930907808225883, 0.055816413546942806, 0.03350573399031336, 0.01910941187710968,
#           0.011779315968001148, 0.006794677273741668, 0.003893670586911219], label='DG1')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.020893829363908916, 0.008634576100181203, 0.0037229604606629483, 0.0015751347244834708,
#           0.0006552608374984257, 0.00026572550792115297, 0.00011217282884066979, 4.837940576883884e-05], label='DG2')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.002203747395022301, 0.0006854861000076535, 0.00017483665049941263, 6.128350352233879e-05,
#           4.405704932013318e-05, 5.1759744589116435e-05, 6.335568143827539e-05, 7.596458250613108e-05], label='DG3')
#
#
# x_ = np.linspace(0.03, 0.47, 100)
# plt.plot(x_, x_ ** 0.5, linestyle='--', label=r'$h^{\frac{1}{2}}$')
# plt.plot(x_, 0.5 * x_ ** 1.5, linestyle='--', label=r'$h^{\frac{3}{2}}$')
# plt.plot(x_, 0.15 * x_ ** 2.5, linestyle='--', label=r'$h^{\frac{5}{2}}$')
# plt.plot(x_, 0.05 * x_ ** 3.5, linestyle='--', label=r'$h^{\frac{7}{2}}$')
#
#
# plt.legend()
# plt.yscale('log')
# plt.xscale('log')
# plt.show()
#
# # Section: diffusion benchmarking
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [1.702094150615805, 1.204151515211308, 0.8127042922878338, 0.5463623509352719, 0.31625560186873247,
#           0.21998462617388914, 0.14157858517975347, 0.09018851141945235], label='DG1')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.2637874859608693, 0.12615965280019004, 0.0613149731567567, 0.029811761360479676, 0.012833299801693888,
#           0.006094685164645065, 0.0030478097159380543, 0.0015919965996815976], label='DG2')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.031110300156962797, 0.010677417691704187, 0.0032191458297148355, 0.001128729865520778,
#           0.00033109120215039835, 0.00013435457924242008, 5.3840774648447445e-05, 0.0009779401045052908], label='DG3')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.2971260113183066, 0.1828029058724379, 0.07861080302328909, 0.04195861622478331, 0.013787611777692114,
#           0.005984351422380635, 0.0023397120736058526, 0.0009185292937760148], label='DG1 (L2)')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.010629481152984902, 0.003659443908576544, 0.000997738365926374, 0.0003009125098002091,
#           9.612316685790496e-05, 2.9803867011379028e-05, 9.667794789759899e-06,
#           4.142688284155784e-06], label='DG2 (L2)')
#
# plt.plot([0.3112956805706241, 0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
#           0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
#          [0.0007607702040317033, 0.00027817538451402086, 4.6606303854261645e-05, 1.3103531073610826e-05,
#           5.962159252399361e-06, 5.533886868971353e-06, 5.50276680979746e-06, 5.606683533554114e-06], label='DG3 (L2)')
#
#
# x_ = np.linspace(0.03, 0.32, 100)
# plt.plot(x_, 5 * x_ ** 1.0, linestyle='--', label=r'$h$')
# plt.plot(x_, x_ ** 2.0, linestyle='--', label=r'$h^{2}$')
# plt.plot(x_, 0.2 * x_ ** 3.0, linestyle='--', label=r'$h^{3}$')
# plt.plot(x_, 0.02 * x_ ** 4.0, linestyle='--', label=r'$h^{4}$')
#
#
# plt.legend()
# plt.yscale('log')
# plt.xscale('log')
# plt.show()

# Section: A-R-D results

x_ = np.linspace(0.03, 0.3, 100)

fig, axes = plt.subplots(1, 3)

axes[0].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.19301566, 0.25803658, 0.27919298, 0.25263494, 0.20184667, 0.13850584, 0.0905836], label='P1')
axes[0].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.11470672, 0.0592882, 0.02939582, 0.01271831, 0.00605886, 0.00304046, 0.00159609], label='P2')
axes[0].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.01061168, 0.00321364, 0.00112746, 0.00032997, 0.00013185, 4.70799898e-05, 0.00091057], label='P3')

axes[0].plot(x_, 10 * x_ ** 1.5, linestyle='--', label=r'$h^{\frac{3}{2}}$')
axes[0].plot(x_, 5 * x_ ** 2.5, linestyle='--', label=r'$h^{\frac{5}{2}}$')
axes[0].plot(x_, 2.0 * x_ ** 3.5, linestyle='--', label=r'$h^{\frac{7}{2}}$')

axes[0].legend(title='dG norm')
axes[0].set_xscale('log')
axes[0].set_yscale('log')

axes[1].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [2.188204303271978, 2.0485208960465453, 1.9231651505376066, 1.2048194230693117,
     0.7447381555770124, 0.3475257332427112, 0.16017107813543244], label='P1')
axes[1].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.3158092050943117, 0.07833488189410755, 0.026982107674756693, 0.010177973534367819,
     0.00458650164147804, 0.0022235493184868532, 0.0011448448890475661], label='P2')
axes[1].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.00947558884130219, 0.002540522241372895, 0.0009204731557355635, 0.0002815499452733829,
     0.00010934254826263515, 3.823437023693224e-05, 0.0005131254136328948], label='P3')

axes[1].plot(x_, 4.0 * x_ ** 1.0, linestyle='--', label=r'$h^{1}$')
axes[1].plot(x_, 0.5 * x_ ** 2.0, linestyle='--', label=r'$h^{2}$')
axes[1].plot(x_, 0.2 * x_ ** 3.0, linestyle='--', label=r'$h^{3}$')

axes[1].legend(title='H1 norm')
axes[1].set_xscale('log')
axes[1].set_yscale('log')

axes[2].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.49144127, 0.45853946, 0.42911422, 0.26648542, 0.16335731, 0.07422686, 0.03204918], label='P1')
axes[2].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.06786793, 0.01467901, 0.00404325, 0.00063451, 0.00014074, 2.76166908e-05, 6.00911208e-06], label='P2')
axes[2].plot(
    [0.27203498241298707, 0.17659926376169954, 0.1382651100773942, 0.09806406440271342,
     0.07166092004527838, 0.04999316531748002, 0.0356082213421404],
    [0.00056271, 6.5312014e-05, 1.32595665e-05, 2.36796401e-06, 6.63163309e-07,
     1.50933015e-07, 1.0121773e-06], label='P3')

axes[2].plot(x_, 4.0 * x_ ** 2.0, linestyle='--', label=r'$h^{2}$')
axes[2].plot(x_, 0.5 * x_ ** 3.0, linestyle='--', label=r'$h^{3}$')
axes[2].plot(x_, 0.2 * x_ ** 4.0, linestyle='--', label=r'$h^{4}$')

axes[2].legend(title='L2 norm')
axes[2].set_xscale('log')
axes[2].set_yscale('log')

plt.show()
